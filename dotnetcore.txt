kestral
1.Cross plateform WEB serverfor ASP.NET Core
2.Kestral can be used by itself as an edge server
3.The process used to host the app is dotnet.exe


Roles of CreateDefaultBuilder()
1.Setting up Web Server
2.Loading host and application configuration from various configuration sources
3.Configuring logging

ASP.NET core application can be hosted 
1.InProcess
2.OutOfProcess

InProcess hosting delivers higher request significantilly.Inprcess hosing having only one web Server i,e IIS.

Out of process hosing contain 2 Web Servrs

1. Internal 
2. External

The Intrnal Web Server is Kestrel and external web server can be IIS , nginx or Apache

what is kestrel
1. Cross plateform Web Server for ASP.NET core
2.kestrel can be used , by itself as edge server
3. The name of the process used in kestrel server is dotnet.exe

<aspnetcorehostingmodel> - OutOfProcess it is default hosting process 

When we run our application with .NETCLI (visual studio command prompt) then it internally uses kestrel as a server.

In OutofProcess IIS,Apache and nginx act as a reverse proxy server , reason is using is that iis acan be configured as addition security feature.

Middleware Request /response pipeline

by default asp.net core application will not access static files to do so we need to create statis file inside wwwroot folder
usefileserver - middle were combine the functionality of usedefaultfiles,usestaticfiles and usedirectorybrower 

AddMvc() - add all mvc servies 
AddMvccore() - add only core mvc services

addmvc internally calls addmvccode method for ecectutation.

https://www.youtube.com/watch?v=KQH51Yip0K0&list=PL6n9fhu94yhVkdrusLaQsfERmL_Jh4XmU&index=16

Advantages of using interface 
1. we can use dependency injection
2.application maintaience and change is easy
3.unit testing is easy

IN dotnet core Static void Main method is the entry point .

when we write "dotnet run " in command line , it will look the project file and build the project .

First it will look the Launch setting where all URL listing the ports .

As long as application run the entry point is Main method where it createWebHostBuilder and inside webhostbuilder it will create default builder where it will map some default configuration services like logging services to console . 

here it will initiate the startup class which will allow to configure custome configuration service , which will be injected inside pagemodel class or controller classs.

again ASP.NET COre will invoke confiure method. The Configure method will establish the middle wear will execute what http incoming request message.

Configure method in startup class is used to configure/Install middleware.

Middlware will processing HTTP messages.
Middleware having 3 basic blocks
1.Logger
2.Authorizer
3.Router

Mgration - Migrations is created by EF Core and it basically it just code a code , it will execute to bring the database model in sync with domain model.



create login psuser with password='Tinku1982$$'

create user psuser for login psuser 

exec sp_addrolemember 'db_datareader','psuser'
exec sp_addrolemember 'db_datawriter','psuser'
exec sp_addrolemember 'db_ddladmin','psuser'


Server=tcp:bethydb.database.windows.net,1433;Initial Catalog=BethyDB;Persist Security Info=False;User ID=psuser;Password=Tinku1982$$;MultipleActiveResultSets=True;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;

Provider=sqloledb;Server=tcp:bethydb.database.windows.net,1433;Database=BethyDB;User Id=psuser;Password=Tinku1982$;


ConnectionStrings:DefaultConnection - connectionstring in appconfig

add-migration <<InitialMigration>>
update-database


Steps To fix HTTPS ISSUE

1. dotnet dev-certs https --clean

2.dotnet dev-certs https -t
3.dotnet dev-certs https --check
dotnet run 

https://dev.azure.com/avnishkumar1981 - Dev Ops URL

Tag Helper - Taghelper enable C# server side code to participate and rendering HTML elements in Razor Files.



 
