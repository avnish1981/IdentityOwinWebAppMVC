Microsoft.AspNET.Identity.entityFramework - Default Implementation of Iuser and IUserStore found in this Nuget package.

OWIN (Open Web Interface for .NET) defines a standard interface between .NET web servers and web applications. The goal of the OWIN interface is to decouple server and application, encourage the development of simple modules for .NET web development, and, by being an open standard, stimulate the open source ecosystem of .NET web development tools.

ASP.NET Idenetity Structure have two main components.
1.Manager
2.Store

Manger is responsiable for how application intract with  ASP.NET Identity
Store is responsiable for how asp.net Identity  intract with Database.

Manager are two types
1.UserManager
2.RoleManager

Store Uses IUserStore and IRoleStore 

Entity uses IUser and IRole

UserManager -> IUserStore ->IUser

RoleManager ->IRoleStore ->IRole

IUser has only two Propties
1.Id and UserName

IUserStore -> It is abstraction of data store/Database,followed by below methods 

Task CreateAsync(TUser user);

Task UpdateAsync(TUser user);

Task DeleteAsync(TUser user);

Task<TUser>FindByIdAsync(Tkey userid);

Task<TUser> FindByNameAsync(string userName);

UserManager - This is where application intract with asp.net Identity Library.

Usermanger having single contructor and it is work with any datastore /database.

Public class Usermanager<Tuser,Tkey>:Idisposable
{
 where Tuser : class ,Iuser<Tkey>
 where Tkey : IEqatable<Tkey>{

Public Usermanager(IUserStore <Tuser,Tkey> store){
}
}
} 

IUser,IUserEmailStore,IUserPasswordStore,IUserSecurityStampStore,IUserPhoneNumberStore,IUserTwoFactorStore,IUserLockOutStore

OWIN Library

Microsoft.ASpNEt.Identity.Owin
Microsoft.AspNet.Identity.EntityFramework
Microsoft.Owin.Host.SystemWeb

SignInManager - That provides simple method to verify credentails and generating Identity to use with in Owin Middlware.

OWIN Extension - For setting up cookies to useful to asp.net Identity usecases such that Two factor authentication . These extensions build on both OWIN IAppbuilder and athentication manager.

OWIN Data Protector TokenProvider - That uses the configured OWin data Protector to protect any token generated by asp.net Identity.Typically these Data Protector would be IIS Machine key.

SecurityStamp Validation - Providing way to OWIN Pipeline to validate cookies upon change in identity data.

SignINManager are three types
1.Password
2.External
3.TwoFactor

OWIN extension - app.CreatePerOwinContext<userManager>
                 ((identityfactoryOptions,owinContext)=>
                  new Usermanager(owinContext.get<UserStore>()));

CreatePerOwinContext - enables depedency injection and life time management . It will be created as per request .

manager = HttpContext.getOwinContext().Get<Usermanager>(); - for current request using httpcontext to retrive depedency directly encode. 

Difference between Two factor and two Step verification.

https://paul.reviews/the-difference-between-two-factor-and-two-step-authentication


https://accounts.google.com/signin/oauth/identifier?response_type=code&client_id=607952613416-fcl5l3ca9jf9pe89s5dtf2aqgbc4jqkn.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A49719%2Fsignin-google&scope=openid%20profile%20email&state=nkz1y9VkLtBCvncez5Ac004JOVPdbyq9O154LWTj_2ofolnZDHrVBwYGdj7OLgoAIdfUB8nTdjN_2ZkjNQI0TqO6bTA3yk6rAjw4phA_47vEWKISs371lUb_CXYqXDywp-VVdswxEURyzX40WUVJUQ5rtGcIUF6y-kPiEC2Oclxxyj0ns-uW9-38yTVYOPdDseMKzwzT_Fy_mTtTcpTyFhbAaLvuf_ZEzHslaZKctNL9tnyUalLvpzxInSZZ_b4W&o2v=1&as=aZd_cN2HxJrwtdfwZFItSA&flowName=GeneralOAuthFlow

Security Stamp Validations using OWIN Cookie Middle ware

How to Validate Authenticated Session using change in crendentials 

For That we need to implement cookie Authentication MiddleWare.

app.UseCookieAuthentication(new CookieAuthenticationOptions
            {
                AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,
                ExpireTimeSpan = TimeSpan.FromMinutes(20),
                //CookieName = "AvnishCookie"
                Provider = new CookieAuthenticationProvider
                {
                    OnValidateIdentity=SecurityStampValidator.OnValidateIdentity<UserManager<ExtendingUser >,ExtendingUser >(
                        validateInterval:TimeSpan.FromSeconds(3),regenerateIdentity:(manager,user)=> manager.CreateIdentityAsync(user,DefaultAuthenticationTypes.ApplicationCookie))
                }

                //This above section describe about if after changing user crendentilas , how system will validate the correct user session identity.

                // For That Application has to hook in to   cookie authentication  middleware. this is done by provider key and here .
                //validateInterval - here security stamp Validator check the userstore to see users security stamp has changed for that in this case we are setting quite low only 3 sec, Pratically it has to be set on 30 min to 1 hour depends upon cookie lifetime.
                //regenerateIdentity -  This function is allow to generate fresh cookie to be issued , if security stamp is not changed
            });


Secure Account management Fundamental




                  

